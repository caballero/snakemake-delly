# Snakemake workflow for structural variant calling
# Juan Caballero
# (C) 2024

import os
import yaml

wildcard_constraints:
    sample=r".+\d+"

# some subroutines needed
def dump_config_to_yaml(config, output_dir):
    output_file = os.path.join(output_dir, "run_config.yaml")
    with open(output_file, 'w') as configfile:
        yaml.dump(config, configfile)

# setting configurations
configfile: "config.yaml"
outdir = workflow.overwrite_workdir #get outdir from -d option of snakemake
config['outdir'] = outdir
os.makedirs(config['outdir'], exist_ok=True)
fastq_dir = str(config['fastq_dir'])

# before running the process
onstart:
    print("\n==== SV pipeline starts ====")
    print("Configuration:")
    print(config)
    print("=" * 80)
    print()
    dump_config_to_yaml(config, '.')

# main workflow
rule all:
    input:
    expand("03_vars/{sample}_delly.bcf", sample=config["sample"])

rule fastp:
    input:
        fq1 = str(fastq_dir) + "/{sample}_R1.fastq.gz",
        fq2 = str(fastq_dir) + "/{sample}_R2.fastq.gz"
    output:
        trim_fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        trim_fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        html_rep = "01_preprocessing/{sample}_report.html",
        json_rep = "01_preprocessing/{sample}_report.json"
    threads: 10
    log:
        "logs/fastp/{sample}.log"
    conda:
        "envs/environment.yaml"
    envmodules:
        "fastp/0.20.1"
    shell:
        """
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html_rep} \
            -j {output.json_rep}
        """
        

rule bwa_mem:
    input:
        ref = config["genome"],
        fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        fq2 = "01_preprocessing/{sample}_R2.fastq.gz"
    output:
        bam = "02_mapped/{sample}.bam"
    log:
        "logs/bwa_mem/{sample}.log"
    params:
        extra = r"-R '@RG\tID:{sample}\tSM:{sample}'"
    threads: 10
    conda:
        "envs/environment.yaml"
    envmodules:
        "bwa/0.7.17",
        "samtools/1.12"
    shell:
        """
        bwa mem \
            -t {threads} \
            {params.extra} \
            {input.ref} \
            {input.fq1} \
            {input.fq2} \
        | samtools view \
            -b \
            --threads 2 \ref = config["genome"],
            -o {output.bam} \
            -
        """


rule samtools_rsort:
    input:
        bam_in = "02_mapped/{sample}.bam"
    output:
        bam_out = "02_mapped/{sample}_rsorted.bam"
    log:
        "logs/samtools_rsort/{sample}.log"
    threads: 10
    conda:
        "envs/environment.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools sort \
            -n \
            --threads {threads} \
            -o {output.bam_out} \
            {input.bam_in}
        """

rule samtools_fixmate:
    input:
        bam_in = "02_mapped/{sample}_rsorted.bam"
    output:
        bam_out = "02_mapped/{sample}_fixmate.bam"
    log:
        "logs/samtools_fixmate/{sample}.log"
    threads: 10
    conda:
        "envs/environment.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools fixmate \
            --threads {threads} \
            -m \
            {input.bam_in} \
            {output.bam_out}
        """

rule samtools_sort:
    input:
        bam_in = "02_mapped/{sample}_fixmate.bam"
    output:
        bam_out = "02_mapped/{sample}_sorted.bam"
    log:
        "logs/samtools_sort/{sample}.log"
    threads: 10
    conda:
        "envs/environment.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools sort \
            --threads {threads} \
            -o {output.bam_out} \
            {input.bam_in}
        """

rule samtools_markdup:
    input:
        bam_in = "02_mapped/{sample}_sorted.bam"
    output:
        bam_out = "02_mapped/{sample}_rmdup.bam"
    log:
        "logs/samtools_markdup/{sample}.log"
    threads: 10
    conda:
        "envs/environment.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools markdup \
            --threads {threads} \
            {input.bam_in} \
            {output.bam_out}
        """

rule samtools_index_rmdup:
    input:
        bam = "02_mapped/{sample}_rmdup.bam"
    output:
        bai = "02_mapped/{sample}_rmdup.bam.bai"
    log:
        "logs/samtools_index/{sample}.log"
    threads: 1
    conda:
        "envs/environment.yaml"
    envmodules:
        "samtools/1.12"
    shell:
        """
        samtools \
            index \
            {input.bam}
        """

rule delly_call:
    input:
        bam = "02_mapped/{sample}_rmdup.bam",
        ref = config["genome"]
    output:
        bcf = "03_vars/{sample}_delly.bcf"
    log:
        "logs/delly_call/{sample.log}"
    conda:
        "envs/environment.yaml"
    shell:
        """
        delly \
            call \
            -g {input.ref} \
            -o {output.bcf} \
            {input.bam}
        """


onsuccess:
    print("\n==== Workflow finished successfully! ====\n")
